缩进、空格、换行、空行、对齐
============================

#. 缩进应该是每个程序员都会做的，只要学过程序就应该知道这个，但是我仍然看过不缩进的程序，或是乱缩进的程序，如果你的公司还有写程序不缩进的程序员，请毫不犹豫的开除他吧，并以破坏源码罪起诉他，还要他赔偿读过他程序的人的精神损失费。缩进，这是不成文规矩，我再重提一下吧，一个缩进一般是一个TAB键或是4个空格。（最好用4个空格）<--由网友vector_3d提醒改正


#. 空格。空格能给程序代来什么损失吗？没有，有效的利用空格可以让你的程序读进来更加赏心悦目。而不一堆表达式挤在一起。看看下面的代码：

.. code-block:: c

    ha=(ha*128+*key++)%tabPtr->size;

    ha = ( ha * 128 + *key++ ) % tabPtr->size;

有空格和没有空格的感觉不一样吧。一般来说，语句中要在各个操作符间加空格，函数调用时，要以各个参数间加空格。如下面这种加空格的和不加的：

.. code-block:: c

    if ((hProc=OpenProcess(PROCESS_ALL_ACCESS,FALSE,pid))==NULL){
    }

    if ( ( hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid) ) == NULL ){
}

#. 换行。不要把语句都写在一行上，这样很不好。如：

.. code-block:: c

    for(i=0;i<len;i++) if((a[i]<'0'||a[i]>'9')&&(a[i]<'a'||a[i]>'z')) break;
    
我拷，这种即无空格，又无换行的程序在写什么啊？加上空格和换行吧。
    
.. code-block:: c

    for ( i=0; i<len; i++) {
        if ( ( a[i] < '0' || a[i] > '9' ) &&
             ( a[i] < 'a' || a[i] > 'z' ) ) {
            break;
        }
    }

好多了吧？有时候，函数参数多的时候，最好也换行，如：

.. code-block:: c

    CreateProcess(
                  NULL,
                  cmdbuf,
                  NULL,
                  NULL,
                  bInhH,
                  dwCrtFlags,
                  envbuf,
                  NULL,
                  &siStartInfo,
                  &prInfo
                 );

条件语句也应该在必要时换行：

    
.. code-block:: c

    if ( ch >= '0' || ch <= '9' ||
         ch >= 'a' || ch <= 'z' ||
         ch >= 'A' || ch <= 'Z' )

#. 空行。不要不加空行，空行可以区分不同的程序块，程序块间，最好加上空行。如：

.. code-block:: c

    HANDLE hProcess;
    PROCESS_T procInfo;

    /* open the process handle */
    if((hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid)) == NULL)
    {
        return LSE_MISC_SYS;
    }

    memset(&procInfo, 0, sizeof(procInfo));
    procInfo.idProc = pid;
    procInfo.hdProc = hProcess;
    procInfo.misc \|= MSCAVA_PROC;

    return(0);
                  
#. 对齐。用TAB键对齐你的一些变量的声明或注释，一样会让你的程序好看一些。如：

.. code-block:: c

    typedef struct _pt_man_t_ {
        int     numProc;    /* Number of processes                 */
        int     maxProc;    /* Max Number of processes             */
        int     numEvnt;    /* Number of events                    */
        int     maxEvnt;    /* Max Number of events                */
        HANDLE* pHndEvnt;   /* Array of events                     */
        DWORD   timeout;    /* Time out interval                   */
        HANDLE  hPipe;      /* Namedpipe                           */
        TCHAR   usr[MAXUSR];/* User name of the process            */
        int     numMsg;     /* Number of Message                   */
        int     Msg[MAXMSG];/* Space for intro process communicate */
    } PT_MAN_T;

怎么样？感觉不错吧。

这里主要讲述了如果写出让人赏心悦目的代码，好看的代码会让人的心情愉快，读起代码也就不累，工整、整洁的程序代码，通常更让人欢迎，也更让人称道。现在的硬盘空间这么大，不要让你的代码挤在一起，这样它们会抱怨你虐待它们的。好了，用“缩进、空格、换行、空行、对齐”装饰你的代码吧，让他们从没有秩序的土匪中变成一排排整齐有秩序的正规部队吧。
